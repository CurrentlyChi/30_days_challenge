#question 1: 
Find the popularity percentage for each user on Meta/Facebook. The popularity percentage is defined as the total number of friends the user has divided by the total number of users on the platform, then converted into a percentage by multiplying by 100.
Output each user along with their popularity percentage. Order records in ascending order by user id.
The 'user1' and 'user2' column are pairs of friends.

My anwser: 
SELECT 
    user1, 
    COUNT(*) / (SELECT COUNT(DISTINCT user1) FROM (SELECT user1 FROM facebook_friends UNION SELECT user2 FROM facebook_friends) AS users_union) * 100 AS popularity_percent
FROM (SELECT user1, user2 FROM facebook_friends UNION SELECT user2 AS user1, user1 AS user2 FROM facebook_friends) AS users_union
GROUP BY 1
ORDER BY 1

#question 2:
--Rank guests based on the total number of messages they've exchanged with any of the hosts. Guests with the same number of messages as other guests should have the same rank. Do not skip rankings if the preceding rankings are identical.
Output the rank, guest id, and number of total messages they've sent. Order by the highest number of total messages first.


My anwser: 
select 
    id_guest,
    sum(n_messages),
    dense_rank() over (order by  sum(n_messages) desc)
from 
    airbnb_contacts
group by 
    id_guest

#question3:
Find the date with the highest total energy consumption from the Meta/Facebook data centers. Output the date along with the total energy consumption across all data centers.


My anwser: 

with cte as (
    select 
        date,
        sum(consumption) as consumption
    from (
        select * from fb_eu_energy 
        union 
        select * from fb_asia_energy 
        union 
        select * from fb_na_energy ) as temp
    group by 
        date)

select * from cte
where consumption = (select Max(consumption) from cte)

#question 4:
Meta/Facebook is quite keen on pushing their new programming language Hack to all their offices. They ran a survey to quantify the popularity of the language and send it to their employees. To promote Hack they have decided to pair developers which love Hack with the ones who hate it so the fans can convert the opposition. Their pair criteria is to match the biggest fan with biggest opposition, second biggest fan with second biggest opposition, and so on. Write a query which returns this pairing. Output employee ids of paired employees. 
Sort users with the same popularity value by id in ascending order.
Duplicates in pairings can be left in the solution. For example, (2, 3) and (3, 2) should both be in the solution.

My anwser: 
-- columns: pairing same popularity values by id in ascending order
with t1 as (
    select 
        employee_id,
        row_number() over (order by popularity, employee_id asc ) order_one
    from
        facebook_hack_survey
), t2 as (
    select 
        employee_id,
        row_number() over (order by popularity desc, employee_id asc) order_two
    from
        facebook_hack_survey
)

select 
    t2.employee_id as approve,
    t1.employee_id as opposition
from
    t1 
join
    t2 on t1.order_one = t2.order_two


